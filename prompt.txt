# Architecture du Backend Ate Leslie Project

## Structure du Projet
```
backend/
├── src/
│   ├── controllers/     # Logique métier et gestion des requêtes
│   ├── middleware/      # Middlewares (auth, validation, etc.)
│   ├── models/         # Modèles Mongoose
│   ├── routes/         # Routes de l'API
│   ├── scripts/        # Scripts utilitaires
│   ├── utils/          # Utilitaires et helpers
│   └── index.ts        # Point d'entrée de l'application
```

## Fonctionnalités Principales

### 1. Authentication & Autorisation
- Système JWT pour l'authentification
- Middleware de protection des routes
- Gestion des rôles (user, admin)
- Validation des données utilisateur

### 2. Gestion des Événements
- CRUD complet pour les événements
- Système de participation
- Catégorisation des événements
- Validation des données

### 3. Système d'Avis
- Gestion des reviews pour les événements
- Calcul automatique des moyennes
- Validation des avis

### 4. Constantes & Types
- Centralisation des constantes dans constants.ts
- Types TypeScript stricts
- Messages d'erreur standardisés
- Règles de validation centralisées

### 5. Utilitaires
- Gestion des erreurs centralisée
- Helpers pour les modèles
- Formatage des réponses
- Gestion des emails

### 6. Sécurité
- Validation des entrées
- Protection CORS
- Sanitization des données
- Rate limiting

## Points Clés de l'Architecture

1. **Modularité**
   - Séparation claire des responsabilités
   - Organisation par domaine fonctionnel
   - Réutilisation du code

2. **Validation**
   - Validation middleware pour chaque route
   - Schémas de validation centralisés
   - Messages d'erreur standardisés

3. **Sécurité**
   - Authentification JWT
   - Protection des routes sensibles
   - Validation des données entrantes

4. **Maintenance**
   - Code TypeScript strict
   - Constants centralisées
   - Types réutilisables

## Conventions de Code

1. **Nommage**
   - PascalCase pour les interfaces et types
   - camelCase pour les variables et fonctions
   - UPPER_CASE pour les constantes

2. **Organisation**
   - Un fichier par modèle/contrôleur
   - Exports nommés préférés
   - Imports groupés par type

3. **Documentation**
   - Commentaires pour les fonctions complexes
   - Types explicites
   - Messages d'erreur descriptifs 